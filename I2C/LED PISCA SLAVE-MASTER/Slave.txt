#include <msp430.h>

int TXData;
int i = 0;

int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
  
  P3OUT &= ~BIT6;
  P1OUT &= ~BIT0;
  P1DIR |= BIT0;
  P1DIR &= ~BIT7;
  P3DIR |= BIT6;
  P1OUT |= BIT0;
   
  
  PMAPPWD = 0x02D52;                        // Get write-access to port mapping regs  
  P1MAP3 = PM_UCB0SDA;                      // Map UCB0SDA output to P1.3 
  P1MAP2 = PM_UCB0SCL;                      // Map UCB0SCL output to P1.2 
  PMAPPWD = 0;                              // Lock port mapping registers 
  P1SEL |= BIT2 + BIT3;                     // Select P1.2 & P1.3 to I2C function
  
  UCB0CTL1 |= UCSWRST;                      // Enable SW reset
  UCB0CTL0 = UCMODE_3 + UCSYNC;             // I2C Slave, synchronous mode
  UCB0I2COA = 0x47;                         // Own Address is 048h
  UCB0CTL1 &= ~UCSWRST;                     // Clear SW reset, resume operation
  UCB0IE |= UCTXIE + UCSTTIE + UCSTPIE;     // Enable TX interrupt
                                            // Enable Start condition interrupt
  TXData = 0;                               // Used to hold TX data
    __bis_SR_register(LPM0_bits + GIE);
}

#pragma vector = USCI_B0_VECTOR
__interrupt void USCI_B0_ISR(void)
{
  switch(__even_in_range(UCB0IV,12))
  {
  case  0: break;                           // Vector  0: No interrupts
  case  2: break;                           // Vector  2: ALIFG
  case  4: break;                           // Vector  4: NACKIFG
  case  6:                                  // Vector  6: STTIFG
     UCB0IFG &= ~UCSTTIFG;                  // Clear start condition int flag
     break;
  case  8:   
    UCB0IFG &= ~UCSTPIFG;                   // Clear stop condition int flag
    break;
  case 10: break;                           // Vector 10: RXIFG  
  case 12:
    
    //if(!(BIT7 & P1IN)){ TXData=1;P3OUT |= BIT6;}
    //else{ TXData = 0;P3OUT &= ~BIT6;}
    
    if(TXData % 200 == 0) P1OUT ^= BIT0;
    TXData++;
    
    UCB0TXBUF = TXData;                     // TX data
    break;
  default: break; 
  }
}
