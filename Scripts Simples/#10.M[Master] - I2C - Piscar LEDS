#include <msp430.h>

unsigned char RXData;
int i = 0;

int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                
  
  P1OUT &= ~0x01;                          
  P1DIR |= 0x01;                           
  P3DIR |= BIT6;
  P3OUT |= BIT6;
  
  
  PMAPPWD = 0x02D52;                        // Get write-access to port mapping regs  
  P1MAP3 = PM_UCB0SDA;                      // Map UCB0SDA output to P1.3
  P1MAP2 = PM_UCB0SCL;                      // Map UCB0SCL output to P1.2
  PMAPPWD = 0;                              // Lock port mapping registers 
  P1SEL |= BIT2 + BIT3;                     // Select P1.2 & P1.3 to I2C function
  
  UCB0CTL1 |= UCSWRST;                      // Enable SW reset
  UCB0CTL0 = UCMST + UCMODE_3 + UCSYNC;     // I2C Master, synchronous mode
  UCB0CTL1 = UCSSEL_2 + UCSWRST;            // Use SMCLK
  UCB0BR0 = 12;                             // fSCL = SMCLK/12 = ~100kHz
  UCB0BR1 = 0;
  UCB0I2CSA = 0x47;                         // Slave Address is 048h
  UCB0CTL1 &= ~UCSWRST;                     // Clear SW reset, resume operation
  UCB0IE |= UCRXIE;                         // Enable RX interrupt
  
  while (1)
  {
    while(UCB0CTL1 & UCTXSTP);             // Ensure stop condition got sent
    UCB0CTL1 |= UCTXSTT;                    // I2C start condition
    while(UCB0CTL1 & UCTXSTT);              // Start condition sent?
    UCB0CTL1 |= UCTXSTP;                    // I2C stop condition
    __bis_SR_register(LPM4_bits + GIE);     // Enter LPM0, enable interrupts
 }
}

#pragma vector = USCI_B0_VECTOR
__interrupt void USCI_B0_ISR(void)
{
  switch(__even_in_range(UCB0IV,12))
  {
  case  0: break;                           // Vector  0: No interrupts
  case  2: break;                           // Vector  2: ALIFG
  case  4: break;                           // Vector  4: NACKIFG
  case  6: break;                           // Vector  6: STTIFG
  case  8: break;                           // Vector  8: STPIFG
  case 10:                                  // Vector 10: RXIFG
    RXData = UCB0RXBUF;                     // Get RX data
    if (RXData == 1){ P1OUT |= BIT0;P3OUT &= ~BIT6;}          
    else{ P3OUT |= BIT6;P1OUT &= ~BIT0;}    
    __bic_SR_register_on_exit(LPM0_bits);   // Exit active CPU
    break;
  case 12: break;                           // Vector 12: TXIFG
  default: break; 
  }
}
